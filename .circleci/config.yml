# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 13.2.0 # Specify the Xcode version to use 
    environment:
      SCHEME: default
      
      PLATFORM: iOS Simulator    

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: |      
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - run:    
          name: Build
          command: |
            # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
            device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
            if [ $SCHEME = default ]; then SCHEME=$(cat default); fi
            if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
            file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
            xcodebuild build-for-testing -scheme "$SCHEME" -"$filetype_parameter" "$file_to_build" -destination "platform=$PLATFORM,name=$device"
      - run:
          name: Test
          command: |
            # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
            device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
            if [ $SCHEME = default ]; then SCHEME=$(cat default); fi
            if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
            file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
            xcodebuild test-without-building -scheme "$SCHEME" -"$filetype_parameter" "$file_to_build" -destination "platform=$PLATFORM,name=$device"
      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - run:
          name: Create Jira card
          command: |          
            curl --location 'https://leosofist.atlassian.net/rest/api/3/issue' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Basic bGVvbmFyZG8uYWxtZWlkYUBzb2Zpc3QuY286QVRBVFQzeEZmR0YwX2JfZ0VyejBIWDI4WGtzMlFZSXdIY09YN1lfdkg2U3hvbG9qbjVULTQ5eVV3ZkVnMHFqSjN0STB6THhhYkhGOXQ3ZW5GZ25rZUZVaDBQQk1BNjNld3dzckNaSjEwek5UQ3E1MnRralFUM2xpR0xsbW9Hd2drbzF2UGItT3VCSlBoZWVGX3QyZENXVllxYzh3WlZoOGdtWU5QT3BJNzgtUnJaeENDSzROTURBPUM4Q0JEN0VC' \
            --header 'Cookie: atlassian.xsrf.token=9b33ab81-217a-4a81-9e51-7e734e37749a_23cbf5ca764fe0b6c4b8a637e4fbe0a1087b21fb_lin' \
            --data '{
              "fields": {
                "project": {
                  "key": "TES"
                },
                "summary": "Creating From Collection By CIRCLE CI_13/04_1",
                "description": {
                  "type": "doc",
                  "version": 1,
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The text Run SUCESS."
                        }
                      ]
                    }
                  ]
                },
                "issuetype": {
                  "name": "Task"
                }
              }
            }'
      
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build