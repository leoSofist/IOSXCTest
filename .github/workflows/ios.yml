name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
        
      - name: Checkout do CÃ³digo
        uses: actions/checkout@v2
      - name: Setup do Ambiente
        run: |
          xcodebuild -version
          xcodebuild -showsdks
          gem install bundler
          bundle install
          pip install xctest2testrail 
      - name: Build do Projeto
        run: xcodebuild -scheme LoginApp -workspace LoginApp.xcworkspace -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=15.2' build test
      - name: Coletar Resultados dos Testes
        run: xcodebuild -scheme LoginApp -workspace LoginApp.xcworkspace -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 11,OS=15.2' test -resultBundlePath ./TestResults.xcresult   
      - name: Coletar Resultados dos Testes
        uses: codecov/codecov-action@v2.1.0
        with:
          path: ./LoginApp.xcodeproj/xcov_report/*.xcresult
          
      - name: Enviar Resultados dos Testes para o TestRail 
        run: |
          xctest2testrail \
            --testrail_url "https://leotestsofist.testrail.io/  \
            --testrail_user "leonardo.almeida@sofist.co" \
            --testrail_password "Am99820120*" \
            --testrail_run_name "Testes do Projeto iOS" \
            --xcodebuild_output "build/reports/junit.xml" \
            --testrail_project_id 1 \
            --testrail_suite_name "Suite de Testes do Projeto iOS" \
            --testrail_include_all \
            --testrail_close_run 
        

          
          
